*surround-funk.txt* Delete, change and yank a surrounding function
along with its additional arguments. Then 'grip' a word or function with the
surrounding function.

License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.


INTRODUCTION                                    *surround-funk*

This was inspired by tpope's |surround| plugin and allows you to delete,
change and yank a surrounding function along with its additional arguments.
With the surrounding function in the unnamed register, you can 'grip' a word or
another function with it. 'Gripping' will wrap/encompass a word or function
with the one you have in the unnamed register (see below).


USAGE


WHAT IS A SURROUNDING FUNCTION?

Below, the * symbols show what would be deleted (or yanked) with the |dsf| (or
|ysf|) command. The ^ symbols show where the cursor can be when issuing the
command:


sf                      Where the name of the function (e.g. outerfunc) is a 
                        standard Vim |word|.

                           **********               *
                        np.outerfunc(innerfunc(arg1))
                           ^^^^^^^^^^               ^
  
                           **********               *************
                        np.outerfunc(innerfunc(arg1), arg2, arg3)
                           ^^^^^^^^^^               ^^^^^^^^^^^^^
  
                           **********    *
                        np.outerfunc(arg1)
                           ^^^^^^^^^^^^^^^
  
                           **********                *
                        np.outerfunc(arg1, arg2, arg3)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
sF                      Where the name of the function (e.g. np.outerfunc) is 
                        any contiguous sequence of |g:legal_func_name_chars|

                        *************               *
                        np.outerfunc(innerfunc(arg1))
                        ^^^^^^^^^^^^^               ^

                        *************               *************
                        np.outerfunc(innerfunc(arg1), arg2, arg3)
                        ^^^^^^^^^^^^^               ^^^^^^^^^^^^^

                        *************    *
                        np.outerfunc(arg1)
                        ^^^^^^^^^^^^^^^^^^
  
                        *************                *
                        np.outerfunc(arg1, arg2, arg3)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  

DELETING, CHANGING AND YANKING A SURROUNDING FUNCTION

                                                *dsf*
dsf                     Delete surrounding function

                                                *dsF*
dsF                     Like |dsf|, but the function name is delimited by
                        any contiguous sequence of |g:legal_func_name_chars|

                                                *csf*
csf                     Like |dsf| but start instert mode where the opening
                        parenthesis of the changed function was

                                                *csF*
csF                     Like |csf|, but the function name is delimited by
                        any contiguous sequence of |g:legal_func_name_chars|

                                                *ysf*
ysf                     Yank surrounding function

                                                *ysF*
ysF                     Like |ysf|, but the function name is delimited by
                        any contiguous sequence of |g:legal_func_name_chars|


GRIPPING A WORD OR ANOTHER FUNCTION

                                                *gsf*
gsf                     Grip (i.e wrap/encompass) another function with the
                        function in the  unnamed register.

                                                *gsF*
gsF                     Like |gsf|, but the function name is delimited by
                        any contiguous sequence of |g:legal_func_name_chars|

                                                *gsw*
gsw                     Grip (i.e wrap/encompass) a word with the function in 
                        the unnamed register.

                                                *gsW*
gsW                     Like |gsw|, but the word is delimited by any contiguous
                        sequence of |g:legal_func_name_chars|


SETTINGS

                                       *g:legal_func_name_chars*
By default the |surround-funk| plugin defines any vim word character
([0-9A-Za-z_]) and any period symbols as valid parts of a functions name. These
symbols are used to delimit the function name when using the capitalised (e.g.
|dsF|, but not |dsf|) versions of the above commands. You can add to or remove
from these groups.

The default:

g:surround_funk_legal_func_name_chars = ['[0-9]', '[A-Z]', '[a-z]', '_', '\.']



    will match function names like:

          *********  *************  **************
    ...), pd.mean(), np2.my_func(), 8np.my._func(), ...
          ^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^



    but would stop at characters not in the legal name set (e.g. @, #, /):

             ******         ******      **********
    ...), pd@mean(), np2.my#func(), 8np/my._func(), ...
             ^^^^^^         ^^^^^^      ^^^^^^^^^^


To make numbers illegal, and to introduce # and @ as legal characters, use:

g:surround_funk_legal_func_name_chars = ['[A-Z]', '[a-z]', '_', '\.', '#', '@']



    will match function names like:

          *********     **********   *************
    ...), pd.mean(), np2.my_func(), 8np.my._func(), ...
          ^^^^^^^^^     ^^^^^^^^^^   ^^^^^^^^^^^^^

          *********     **********      **********
    ...), pd@mean(), np2.my#func(), 8np/my._func(), ...
          ^^^^^^^^^     ^^^^^^^^^^      ^^^^^^^^^^
